#include <iostream>
#include <fstream>
#include <stdio.h>
#include <stdlib.h>
#include <cstdio>
#include <time.h>
#include <vector>
#include <array>

using namespace std;

vector<int> sudoku1;          //Vector donde guardamos las filas.
vector<vector<int>> sudoku0;  //Vector de vectores donde se va guardando todas las filas.

void print_sudoku(){

    int counthuecos{0}, counthuecos2{0}, countfilas{0}, countgrupo{0};               //contadores para saber las iteraciones del print

    cout << endl;
    for(int i{0}; i < sudoku0.size(); i++){                                              //Vamos imprimiendo, en el caso de que en esa posición haya un "0" (está vacio)
        for(int j{0}; j < sudoku0.at(i).size(); j++){                                 //imprimimos un un espacio para que se vea el huevo vacio.                                                                                  
            if(sudoku0.at(i).at(j) != 0){                                                                                                 
                cout << sudoku0.at(i).at(j);                                                                                             
            }else{
                cout << " ";
            }
            counthuecos++;
            if(counthuecos == 3){                                                          //si ha llegado a 3, reseteamos el contador. Si no, imprimimos "|"
                counthuecos = 0;
                counthuecos2++; 
                if(counthuecos2 == 3){                                                  //si ha llegado a 3, reseteamos. Si no, Imprimimos "||". Con esto, cada 3 elementos impresos hacemos una separación
                    counthuecos2 = 0;                                                 //de un cubo a otro.
                }else{
                    cout << " || " ;
                }
            }else{
                cout << " | " ;
            }
        }
        cout << endl;
        countfilas++;
        if(countfilas == 3){                                                      //Mismo funcionamiento que antes, pero esta vez para las separaciones horizontales.
            countfilas = 0;
            countgrupo++;
            if(countgrupo == 3){
                countgrupo = 0;
            }else{
                    cout << "===================================="<< endl;
                }
        }else{
            cout << "------------------------------------"<< endl;
        }
    }
    cout << endl;
}


//Estas funciones se hacen para comprobar filas, columnas y cubos, para más tarde hacer una función bool que llamaremos en el main para acabar el juego en caso de error.
bool lose_fila(){
    bool a = false;
    for (unsigned long int i{0}; i < sudoku0.size(); i++) {
        vector<int> lose;
        for (unsigned long int i_2{0}; i_2 < sudoku0.at(i).size(); i_2++) {
            if (sudoku0.at(i).at(i_2) != 0){                                  //Metemos en el vector lose los números siempre y cuando no sean 0(está vacio)
                lose.push_back(sudoku0.at(i).at(i_2));
            }
        }
        for (unsigned long int j{0}; j < lose.size(); j++) {                 //Recorremos el vector 
            for (unsigned long int k{0}; k < lose.size(); k++) {
                if (j != k){
                    if (lose.at(j) == lose.at(k)){                            //Si encontramos dos numeros iguales, devolvemos true.
                        a = true;
                    }
                }
            }
        }
    }
    return a;
}

bool lose_columna(){
    bool a = false;
    for (unsigned long int i{0}; i < sudoku0.size(); i++) {                            //Igual que antes, salvo que ahora con las columnas.
        vector<int> lose;
        for (unsigned long int i_2{0}; i_2 < sudoku0.at(i).size(); i_2++) {
            if (sudoku0.at(i_2).at(i) != 0){
                lose.push_back(sudoku0.at(i_2).at(i));                                 //Esto es lo que nos permite hacerlo con las columnas, la única parte distinta.
            }
        }
        for (unsigned long int j{0}; j < lose.size(); j++) {
            for (unsigned long int k{0}; k < lose.size(); k++) {
                if (j != k){
                    if (lose.at(j) == lose.at(k)){
                        a = true;
                    }
                }
            }
        }

    }
    return a;
}

bool lose_cube(){
    bool a = false;
    for (unsigned long int i{1}; i <= 7; i += 3) {
        for (unsigned long int i_2{1}; i_2 <= 7; i_2 +=3) {
            vector<int> lose;
            for (int e{-1}; e < 2; e++) {
                for (int ee{-1}; ee < 2; ee++) {
                    if (sudoku0.at(i+e).at(i+ee) != 0) lose.push_back(sudoku0.at(i+e).at(i+ee));                      
                }
            }
            for (unsigned long int j{0}; j < lose.size(); j++) {                                              //El método de verificación es el mismo.
                for (unsigned long int k{0}; k < lose.size(); k++) {
                    if (j != k){
                        if (lose.at(j) == lose.at(k)){
                            a = true;
                        }
                    }
                }
            }
        }

    }
    return a;
}

//Función lose(), que más tarde en el main llamaremos en el caso de que sea = true.
bool lose(){
    bool fila, columna, cube;  //Variables booleanas.

    fila = lose_fila();        //Las inicializamos con las funciones que comprueban si hay un número o no repetido.
    columna = lose_columna();
    cube = lose_cube();

    if((fila == true || columna == true) || cube == true){  //En el caso de que cualquiera de ellas sea cierta, es decir, hay un número repetido, devuelve un true.
        return true;
    }else{
        return false;
    }
}

//Función win(), para si no se equivoca la persona al colocar los números.
bool win(){
    bool a= false;
    vector<int> ceros;
    for(int i{0}; i < sudoku0.size(); i++){             //Recorremos y buscamos ceros.                             
        for(int j{0}; j < sudoku0.at(i).size(); j++){                                                           
            if(sudoku0.at(i).at(j) == 0){              //Si hay algun 0, se guarda en el vector ceros.           
                ceros.push_back(sudoku0.at(i).at(j));                                                             
            }
        }
    }
    if(ceros.size() == 0){        //Si no hya ceros, todos los huecos están llenos.
        if(lose() == false){      //En el caso de que lose() sea false, ha ganado, devolvemos true.
            a = true;
        }else{
            a = false;           //Si lose() es ture, devolvemos false.
        }
    }else{
        a = false;              //Si todavia hay ceros, devolvemos false.
    }
    return a;
}


int main()
{
    srand(time(NULL));
    ifstream sudoku;
    string numbers, sudoku_name;
    int number;
    
    
    //if random
    unsigned long int sudoku_number = rand()%(5);        //Generamos un número aleatorio.

    cout << "Se eligio el sudoku: " << sudoku_number + 1 << endl;

    if(sudoku_number == 0) sudoku_name = "Sudoku1";  //Dependiendo de que número salga cargamos uno u otro fichero.
    if(sudoku_number == 1) sudoku_name = "Sudoku2";
    if(sudoku_number == 2) sudoku_name = "Sudoku3";
    if(sudoku_number == 3) sudoku_name = "Sudoku4";
    if(sudoku_number == 4) sudoku_name = "Sudoku5";

    sudoku.open(sudoku_name);             // .Open en sudoku, donde abrimos el fichero correspondiente al numero aleatorio.0
    if(sudoku.is_open()){                 //Comprobamos que se haya abierto.
        while(!sudoku.eof()){             //Mientras sudoku tenga información cargamos los números en forma de string y los pasamos a enteros.
            sudoku >> numbers;
            number = atoi(numbers.c_str());
            if(sudoku1.size() < 9){          //Rellanmos una de las filas con los números correspondientes.
                sudoku1.push_back(number);
            }else{
                sudoku0.push_back(sudoku1);                      //Metemos nuestro vector en el vector de vectores.
                sudoku1.erase(sudoku1.begin(), sudoku1.end());   //Borramos el vector para volver a rellenarlo.
                sudoku1.push_back(number);
            }
        }
    }else{
        cout << "Error " << endl;      //Si el fichero no se ha abierto, sacamos por pantalla "Error"
    }

    sudoku.close();

    print_sudoku();                   //Imprimimos el sudoku.

    for(;;){
        int numberr, num1, num2, now;
       
       cout << "Dime la posicion teniendo en cuenta: " << endl <<
                "00 01 02 || 03 04 05 || 06 07 08" << endl <<
                "10 11 12 || 13 14 15 || 16 17 18" << endl <<
                "20 21 22 || 23 24 25 || 26 27 28" << endl <<
                "================================" << endl <<
                "30 31 32 || 33 34 35 || 36 37 38" << endl <<
                "40 41 42 || 43 44 45 || 46 47 48" << endl <<
                "50 51 52 || 53 54 55 || 56 57 58" << endl <<
                "================================" << endl <<
                "60 61 62 || 63 64 65 || 66 67 68" << endl <<
                "70 71 72 || 73 74 75 || 76 77 78" << endl <<
                "80 81 82 || 83 84 85 || 86 87 88" << endl;
        cin >> numberr;
        num1 = numberr/10%10;           
        num2 = numberr - num1*10;

        if(sudoku0.at(num1).at(num2) == 0){                        //Si el numero es esa posición = 0, se puede rellenar.
            cout << "Dime el numero que quieras meter: " << endl;
            cin >> now;                                            //Pedimos el número que queremos meter. y lo metemos.
            sudoku0.at(num1).at(num2) = now;                                                                             
        }else{
            cout << "No puedes modificar ese numero" << endl;     //Si la posición está ocupada.
        }

        print_sudoku();                    //Imprimimos el sudoku.

        if(win() == true){
            cout << "Ganaste!!" << endl;   //Si cualquiera de las funciones nos ha devuelto un true, imprimimos si ha perdido o ha ganado.
            break;
        }
        if(lose() == true){
            cout << "Perdiste =(" << endl;
            break;
        }
    }

    return 0;
}
